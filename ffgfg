# Объектно-ориентированное Программирование в Python


Представьте сценарий, где вам нужно записывать посты используя
подход объектно-ориентированного программирования. Первое, что
вам нужно сделать — это определить реальные объекты в записи постов
Какие аспекты поиска обладают определенными характеристиками и могут
выполнять ту или иную функцию?

* Пост в интернете может обладать такими характеристиками как:
  * запись в файл;
  * поиск по ключевым словам;
  * поиск по дате и времени.

Соответственно, пост может обладать разными характеристиками,
а так же существует пользователь, который имеет национальность, пол,
возраст, пол.


Как и в этом примере, в
[объектно-ориентированном программировании](https://python-scripts.com/object-oriented-programming-in-python)
мы создадим объекты, которые будут соответствовать реальным аспектам.

Стоит обратить внимание на то, что объектно-ориентированное
программирование — не зависящая от языка программирования концепция.
Это общая концепция программирования и большинство современных
языков, такие как Java, C#, C++ и Python поддерживают объектно-
-ориентированное программирование.

## Библиотека
В то время как справочник по языку Python описывает точный
синтаксис и семантику языка Python, это справочное
руководство по библиотеке описывает стандартную библиотеку,
которая распространяется вместе с Python. В ней также описаны
некоторые дополнительные компоненты, которые обычно
включаются в дистрибутивы Python.
```
import datetime
import json
```

## Класс

Класс в объектно-ориентированном программировании выступает в
роли чертежа для объекта. Класс можно рассматривать как карту
дома. Вы можете понять, как выглядит дом, просто взглянув на
его карту.


> Cам по себе класс не представляет ничего. К примеру, нельзя
сказать что карта является домом, она только объясняет как
настоящий дом должен выглядеть.

Ключевое слово class используется для создания класса в Python.
Название класса следует за ключом class, за которым следует двоеточие.
Тело класса начинается с новой строки, с отступом на одну
вкладку влево.

Давайте рассмотрим, как мы можем создать самый простой класс
в Python. Взглянем на следующий код:

```
class Post:
    def __init__(self, author, content, date):
        if not date:
            date = str(datetime.datetime.now()).split(" ")[0]
        self.author = author
        self.content = content
        self.date = date

    def __repr__(self):
        return f"{self.author}\t\t{self.date}\n" \
               f"{self.content}"

    def search_by_author(self, author):
        return author.lower() in self.author.lower()

    def search_by_date(self, date):
        return date.lower() in self.date.lower()

    def search_by_content(self, content):
        return content.lower() in self.content.lower()
```

Здесь мы создали под названием пост с тремя атрибутами author,
content, date. Наш класс также содержит три метода: search_by_author,
search_by_date, search_by_content.

```
class Posts:
    def __init__(self, path):
        self.path = path
        self.posts = []
        with open(self.path, "r", encoding="utf-8") as file:
            data = json.load(file)
        for post in data:
            self.posts.append(Post(post["author"],
                                   post["content"],
                                   post["date"]))

    def append(self, post):
        self.posts.append(post)
        s = []
        with open(self.path, "w", encoding="utf-8") as file:
            for post in self.posts:
                s.append({
                    "author": post.author,
                    "content": post.content,
                    "date": post.date
                })
            json.dump(s, file, ensure_ascii=False)


def main():
    posts = Posts("posts.json")
    user_answer = int(input("0. Выход\n"
                            "1. Добавить пост\n"
                            "2. Показать посты\n"))
    if user_answer == 0:
        exit()
    elif user_answer == 1:
        posts.append(Post(
            input("Ваше имя: "),
            input("Текст публикации:\n"),
            input("Дата (пропустите, чтобы установить текущую): ")
        ))
    elif user_answer == 2:
        for post in posts.posts:
            print(post)
```
Здесь методы выполняют добавление в файл и чтобы
пользователь мог выходить из программы и осуществлять поиск
по постам

## Объекты

Раннее мы поняли, что класс предоставляет чертеж объекта.
Однако, чтобы на самом деле использовать объекты и методы
класса, вам нужно создать объект из этого класса. Существует
несколько методов и атрибутов класса, которые можно
использовать вне объекта, мы рассмотрим их в следующем
разделе.

Сейчас просто запомните, что по умолчанию, нам нужно создать
объект класса перед тем, как мы сможем начать использовать
его методы и атрибуты.

Объект также называется экземпляром. Тем не менее процесс
создания объекта класса называется инициализация. В Python,
чтобы создать объект класса, нам просто нужно вписать
название класса, с последующими открывающимися и
закрывающимися скобками.

### Например:
```
__init__
__repr__
```
